// Copyright (c) The Thanos Authors.
// Licensed under the Apache License 2.0.

syntax = "proto3";
package thanos;

import "google/protobuf/any.proto";

option go_package = "github.com/efficientgo/examples/pkg/parquet-export/export1";

/// Store represents API against instance that stores XOR encoded values with label set metadata (e.g Prometheus metrics).
service Store {
  /// Series streams each Series (Labels and chunk/downsampling chunk) for given label matchers and time range.
  ///
  /// Series should strictly stream full series after series, optionally split by time. This means that a single frame can contain
  /// partition of the single series, but once a new series is started to be streamed it means that no more data will
  /// be sent for previous one.
  /// Series has to be sorted.
  ///
  /// There is no requirements on chunk sorting, however it is recommended to have chunk sorted by chunk min time.
  /// This heavily optimizes the resource usage on Querier / Federated Queries.
  rpc Series(SeriesRequest) returns (stream SeriesResponse);
}

enum StoreType {
  UNKNOWN = 0;
  QUERY = 1;
  RULE = 2;
  SIDECAR = 3;
  STORE = 4;
  RECEIVE = 5;
  // DEBUG represents some debug StoreAPI components e.g. thanos tools store-api-serve.
  DEBUG = 6;
}

message SeriesRequest {
  int64 min_time                 = 1;
  int64 max_time                 = 2;
  repeated LabelMatcher matchers = 3;

  int64 max_resolution_window = 4;
  repeated Aggr aggregates    = 5;

  // TODO(bwplotka): Move Thanos components to use strategy instead. Including QueryAPI.
  PartialResponseStrategy partial_response_strategy = 7;

  // skip_chunks controls whether sending chunks or not in series responses.
  bool skip_chunks = 8;

  // hints is an opaque data structure that can be used to carry additional information.
  // The content of this field and whether it's supported depends on the
  // implementation of a specific store.
  google.protobuf.Any hints = 9;
}

enum Aggr {
  RAW     = 0;
  COUNT   = 1;
  SUM     = 2;
  MIN     = 3;
  MAX     = 4;
  COUNTER = 5;
}

message SeriesResponse {
  oneof result {
    /// series contains 1 response series. The series labels are sorted by name.
    Series series = 1;

    /// warning is considered an information piece in place of series for warning purposes.
    /// It is used to warn store API user about suspicious cases or partial response (if enabled).
    string warning = 2;

    /// hints is an opaque data structure that can be used to carry additional information from
    /// the store. The content of this field and whether it's supported depends on the
    /// implementation of a specific store. It's also implementation specific if it's allowed that
    /// multiple SeriesResponse frames contain hints for a single Series() request and how should they
    /// be handled in such case (ie. merged vs keep the first/last one).
    google.protobuf.Any hints = 3;
  }
}


message Chunk {
  enum Encoding {
    XOR = 0;
  }
  Encoding type  = 1;
  bytes data     = 2;
}

message Series {
  repeated Label labels      = 1;
  repeated AggrChunk chunks  = 2;
}

message AggrChunk {
  int64 min_time = 1;
  int64 max_time = 2;

  Chunk raw     = 3;
  Chunk count   = 4;
  Chunk sum     = 5;
  Chunk min     = 6;
  Chunk max     = 7;
  Chunk counter = 8;
}

// Matcher specifies a rule, which can match or set of labels or not.
message LabelMatcher {
  enum Type {
    EQ  = 0; // =
    NEQ = 1; // !=
    RE  = 2; // =~
    NRE = 3; // !~
  }
  Type type    = 1;
  string name  = 2;
  string value = 3;
}

/// PartialResponseStrategy controls partial response handling.
enum PartialResponseStrategy {
  /// WARN strategy tells server to treat any error that will related to single StoreAPI (e.g missing chunk series because of underlying
  /// storeAPI is temporarily not available) as warning which will not fail the whole query (still OK response).
  /// Server should produce those as a warnings field in response.
  WARN = 0;
  /// ABORT strategy tells server to treat any error that will related to single StoreAPI (e.g missing chunk series because of underlying
  /// storeAPI is temporarily not available) as the gRPC error that aborts the query.
  ///
  /// This is especially useful for any rule/alert evaluations on top of StoreAPI which usually does not tolerate partial
  /// errors.
  ABORT = 1;
}

message Label {
  string name  = 1;
  string value = 2;
}

message LabelSet {
  repeated Label labels = 1;
}

message ZLabelSet {
  repeated Label labels = 1;
}
